{"script":"/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ 945:
/***/ ((module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Z": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _Users_benoitrognier_Projects_completium_testproject_node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(834);
/* harmony import */ var _Users_benoitrognier_Projects_completium_testproject_node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_Users_benoitrognier_Projects_completium_testproject_node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _Users_benoitrognier_Projects_completium_testproject_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(979);
/* harmony import */ var _Users_benoitrognier_Projects_completium_testproject_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_Users_benoitrognier_Projects_completium_testproject_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _Users_benoitrognier_Projects_completium_testproject_node_modules_css_loader_dist_cjs_js_vars_css__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(886);
// Imports



var ___CSS_LOADER_EXPORT___ = _Users_benoitrognier_Projects_completium_testproject_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_Users_benoitrognier_Projects_completium_testproject_node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));
___CSS_LOADER_EXPORT___.i(_Users_benoitrognier_Projects_completium_testproject_node_modules_css_loader_dist_cjs_js_vars_css__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z);
// Module
___CSS_LOADER_EXPORT___.push([module.id, ".codeFrame {\n  position: relative\n}\n\n.copyButton {\n  align-items: center;\n  display: flex;\n  line-height: 0;\n  opacity: 0;\n  padding: 0.4rem;\n  transition: opacity .2s ease-in-out;\n  position: absolute;\n  right: var(--copy-button-right);\n  top: var(--copy-button-top);\n  border: 1px solid var(--copy-button-border-color);\n  border-radius: var(--copy-button-border-radius)\n}\n\n.codeFrame:hover .copyButton {\n  opacity: 0.5;\n  cursor: pointer\n}\n\n.codeFrame:hover .copyButton:hover {\n  opacity: 1 !important;\n}\n\n.copyButtonIcons {\n  width: 18px;\n  height: 18px;\n  position: relative;\n}\n\n.copyButton:hover .copyButtonIcon {\n  opacity: 1 !important;\n}\n\n.copyButtonIcon,\n.copyButtonSuccessIcon {\n  position: absolute;\n  top: 0;\n  left: 0;\n  fill: currentColor;\n  opacity: inherit;\n  width: inherit;\n  height: inherit;\n  transition: all 0.15s ease;\n}\n\n.copyButtonSuccessIcon {\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%) scale(0.33);\n  opacity: 0;\n  color: var(--copy-button-success-color);\n}\n\n.copyButtonCopied .copyButtonIcon {\n  transform: scale(0.33);\n  opacity: 0;\n}\n\n.copyButtonCopied .copyButtonSuccessIcon {\n  transform: translate(-50%, -50%) scale(1);\n  opacity: 1;\n  transition-delay: 0.075s;\n}\n\n", ""]);
// Exports
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ 941:
/***/ ((module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Z": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _Users_benoitrognier_Projects_completium_testproject_node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(834);
/* harmony import */ var _Users_benoitrognier_Projects_completium_testproject_node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_Users_benoitrognier_Projects_completium_testproject_node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _Users_benoitrognier_Projects_completium_testproject_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(979);
/* harmony import */ var _Users_benoitrognier_Projects_completium_testproject_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_Users_benoitrognier_Projects_completium_testproject_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _Users_benoitrognier_Projects_completium_testproject_node_modules_css_loader_dist_cjs_js_vars_css__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(886);
// Imports



var ___CSS_LOADER_EXPORT___ = _Users_benoitrognier_Projects_completium_testproject_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_Users_benoitrognier_Projects_completium_testproject_node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));
___CSS_LOADER_EXPORT___.i(_Users_benoitrognier_Projects_completium_testproject_node_modules_css_loader_dist_cjs_js_vars_css__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z);
// Module
___CSS_LOADER_EXPORT___.push([module.id, "a {\n  color: var(--primay-color);\n  text-decoration: none;\n}\n\na:hover {\n  text-decoration: underline\n}\n\na::after .external {\n  content: var(--external-link-anchor)\n}\n", ""]);
// Exports
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ 352:
/***/ ((module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Z": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _Users_benoitrognier_Projects_completium_testproject_node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(834);
/* harmony import */ var _Users_benoitrognier_Projects_completium_testproject_node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_Users_benoitrognier_Projects_completium_testproject_node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _Users_benoitrognier_Projects_completium_testproject_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(979);
/* harmony import */ var _Users_benoitrognier_Projects_completium_testproject_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_Users_benoitrognier_Projects_completium_testproject_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);
// Imports


var ___CSS_LOADER_EXPORT___ = _Users_benoitrognier_Projects_completium_testproject_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_Users_benoitrognier_Projects_completium_testproject_node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));
// Module
___CSS_LOADER_EXPORT___.push([module.id, "\n/**\n * Inspired by gatsby remark prism - https://www.gatsbyjs.com/plugins/gatsby-remark-prismjs/\n * 1. Make the element just wide enough to fit its content.\n * 2. Always fill the visible space in .code-highlight.\n */\n.code-highlight {\n  float: left; /* 1 */\n  min-width: 100%; /* 2 */\n}\n\n.code-line {\n  display: block;\n  padding-left: 16px;\n  padding-right: 16px;\n  margin-left: -16px;\n  margin-right: -16px;\n  border-left: 4px solid rgba(0, 0, 0, 0); /* Set placeholder for highlight accent border color to transparent */\n}\n\n.code-line.inserted {\n  background-color: rgba(16, 185, 129, 0.2); /* Set inserted line (+) color */\n}\n\n.code-line.deleted {\n  background-color: rgba(239, 68, 68, 0.2); /* Set deleted line (-) color */\n}\n\n.highlight-line {\n  margin-left: -16px;\n  margin-right: -16px;\n  background-color: rgba(55, 65, 81, 0.123); /* Set highlight bg color */\n  border-left: 4px solid rgb(59, 130, 246); /* Set highlight accent border color */\n}\n\n.line-number::before {\n  display: inline-block;\n  width: 1rem;\n  text-align: right;\n  margin-right: 16px;\n  margin-left: -8px;\n  color: rgb(156, 163, 175); /* Line number color */\n  content: attr(line);\n}\n", ""]);
// Exports
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ 886:
/***/ ((module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Z": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _Users_benoitrognier_Projects_completium_testproject_node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(834);
/* harmony import */ var _Users_benoitrognier_Projects_completium_testproject_node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_Users_benoitrognier_Projects_completium_testproject_node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _Users_benoitrognier_Projects_completium_testproject_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(979);
/* harmony import */ var _Users_benoitrognier_Projects_completium_testproject_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_Users_benoitrognier_Projects_completium_testproject_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);
// Imports


var ___CSS_LOADER_EXPORT___ = _Users_benoitrognier_Projects_completium_testproject_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_Users_benoitrognier_Projects_completium_testproject_node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));
// Module
___CSS_LOADER_EXPORT___.push([module.id, ":root {\n  --background-color: white;\n  --text-color: black;\n  --primay-color: #00ACE7;\n  --heading-anchor: ' #';\n  --external-link-anchor: ' ⬈';\n  --copy-button-right: 12px;\n  --copy-button-top: 12px;\n  --copy-button-border-color: #8080807a;\n  --copy-button-success-color: #00d600;\n  --copy-button-border-radius: 6px\n}", ""]);
// Exports
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ 979:
/***/ ((module) => {



/*
  MIT License http://www.opensource.org/licenses/mit-license.php
  Author Tobias Koppers @sokra
*/
module.exports = function (cssWithMappingToString) {
  var list = [];

  // return the list of modules as css string
  list.toString = function toString() {
    return this.map(function (item) {
      var content = "";
      var needLayer = typeof item[5] !== "undefined";
      if (item[4]) {
        content += "@supports (".concat(item[4], ") {");
      }
      if (item[2]) {
        content += "@media ".concat(item[2], " {");
      }
      if (needLayer) {
        content += "@layer".concat(item[5].length > 0 ? " ".concat(item[5]) : "", " {");
      }
      content += cssWithMappingToString(item);
      if (needLayer) {
        content += "}";
      }
      if (item[2]) {
        content += "}";
      }
      if (item[4]) {
        content += "}";
      }
      return content;
    }).join("");
  };

  // import a list of modules into the list
  list.i = function i(modules, media, dedupe, supports, layer) {
    if (typeof modules === "string") {
      modules = [[null, modules, undefined]];
    }
    var alreadyImportedModules = {};
    if (dedupe) {
      for (var k = 0; k < this.length; k++) {
        var id = this[k][0];
        if (id != null) {
          alreadyImportedModules[id] = true;
        }
      }
    }
    for (var _k = 0; _k < modules.length; _k++) {
      var item = [].concat(modules[_k]);
      if (dedupe && alreadyImportedModules[item[0]]) {
        continue;
      }
      if (typeof layer !== "undefined") {
        if (typeof item[5] === "undefined") {
          item[5] = layer;
        } else {
          item[1] = "@layer".concat(item[5].length > 0 ? " ".concat(item[5]) : "", " {").concat(item[1], "}");
          item[5] = layer;
        }
      }
      if (media) {
        if (!item[2]) {
          item[2] = media;
        } else {
          item[1] = "@media ".concat(item[2], " {").concat(item[1], "}");
          item[2] = media;
        }
      }
      if (supports) {
        if (!item[4]) {
          item[4] = "".concat(supports);
        } else {
          item[1] = "@supports (".concat(item[4], ") {").concat(item[1], "}");
          item[4] = supports;
        }
      }
      list.push(item);
    }
  };
  return list;
};

/***/ }),

/***/ 834:
/***/ ((module) => {



module.exports = function (i) {
  return i[1];
};

/***/ }),

/***/ 420:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {



var m = __webpack_require__(533);
if (true) {
  exports.createRoot = m.createRoot;
  exports.hydrateRoot = m.hydrateRoot;
} else { var i; }


/***/ }),

/***/ 294:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

var __webpack_unused_export__;
/**
 * @license React
 * react-jsx-runtime.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var f=__webpack_require__(363),k=Symbol.for("react.element"),l=Symbol.for("react.fragment"),m=Object.prototype.hasOwnProperty,n=f.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,p={key:!0,ref:!0,__self:!0,__source:!0};
function q(c,a,g){var b,d={},e=null,h=null;void 0!==g&&(e=""+g);void 0!==a.key&&(e=""+a.key);void 0!==a.ref&&(h=a.ref);for(b in a)m.call(a,b)&&!p.hasOwnProperty(b)&&(d[b]=a[b]);if(c&&c.defaultProps)for(b in a=c.defaultProps,a)void 0===d[b]&&(d[b]=a[b]);return{$$typeof:k,type:c,key:e,ref:h,props:d,_owner:n.current}}__webpack_unused_export__=l;exports.jsx=q;exports.jsxs=q;


/***/ }),

/***/ 523:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



if (true) {
  module.exports = __webpack_require__(294);
} else {}


/***/ }),

/***/ 972:
/***/ ((module) => {



var stylesInDOM = [];
function getIndexByIdentifier(identifier) {
  var result = -1;
  for (var i = 0; i < stylesInDOM.length; i++) {
    if (stylesInDOM[i].identifier === identifier) {
      result = i;
      break;
    }
  }
  return result;
}
function modulesToDom(list, options) {
  var idCountMap = {};
  var identifiers = [];
  for (var i = 0; i < list.length; i++) {
    var item = list[i];
    var id = options.base ? item[0] + options.base : item[0];
    var count = idCountMap[id] || 0;
    var identifier = "".concat(id, " ").concat(count);
    idCountMap[id] = count + 1;
    var indexByIdentifier = getIndexByIdentifier(identifier);
    var obj = {
      css: item[1],
      media: item[2],
      sourceMap: item[3],
      supports: item[4],
      layer: item[5]
    };
    if (indexByIdentifier !== -1) {
      stylesInDOM[indexByIdentifier].references++;
      stylesInDOM[indexByIdentifier].updater(obj);
    } else {
      var updater = addElementStyle(obj, options);
      options.byIndex = i;
      stylesInDOM.splice(i, 0, {
        identifier: identifier,
        updater: updater,
        references: 1
      });
    }
    identifiers.push(identifier);
  }
  return identifiers;
}
function addElementStyle(obj, options) {
  var api = options.domAPI(options);
  api.update(obj);
  var updater = function updater(newObj) {
    if (newObj) {
      if (newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap && newObj.supports === obj.supports && newObj.layer === obj.layer) {
        return;
      }
      api.update(obj = newObj);
    } else {
      api.remove();
    }
  };
  return updater;
}
module.exports = function (list, options) {
  options = options || {};
  list = list || [];
  var lastIdentifiers = modulesToDom(list, options);
  return function update(newList) {
    newList = newList || [];
    for (var i = 0; i < lastIdentifiers.length; i++) {
      var identifier = lastIdentifiers[i];
      var index = getIndexByIdentifier(identifier);
      stylesInDOM[index].references--;
    }
    var newLastIdentifiers = modulesToDom(newList, options);
    for (var _i = 0; _i < lastIdentifiers.length; _i++) {
      var _identifier = lastIdentifiers[_i];
      var _index = getIndexByIdentifier(_identifier);
      if (stylesInDOM[_index].references === 0) {
        stylesInDOM[_index].updater();
        stylesInDOM.splice(_index, 1);
      }
    }
    lastIdentifiers = newLastIdentifiers;
  };
};

/***/ }),

/***/ 42:
/***/ ((module) => {



var memo = {};

/* istanbul ignore next  */
function getTarget(target) {
  if (typeof memo[target] === "undefined") {
    var styleTarget = document.querySelector(target);

    // Special case to return head of iframe instead of iframe itself
    if (window.HTMLIFrameElement && styleTarget instanceof window.HTMLIFrameElement) {
      try {
        // This will throw an exception if access to iframe is blocked
        // due to cross-origin restrictions
        styleTarget = styleTarget.contentDocument.head;
      } catch (e) {
        // istanbul ignore next
        styleTarget = null;
      }
    }
    memo[target] = styleTarget;
  }
  return memo[target];
}

/* istanbul ignore next  */
function insertBySelector(insert, style) {
  var target = getTarget(insert);
  if (!target) {
    throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");
  }
  target.appendChild(style);
}
module.exports = insertBySelector;

/***/ }),

/***/ 34:
/***/ ((module) => {



/* istanbul ignore next  */
function insertStyleElement(options) {
  var element = document.createElement("style");
  options.setAttributes(element, options.attributes);
  options.insert(element, options.options);
  return element;
}
module.exports = insertStyleElement;

/***/ }),

/***/ 14:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



/* istanbul ignore next  */
function setAttributesWithoutAttributes(styleElement) {
  var nonce =  true ? __webpack_require__.nc : 0;
  if (nonce) {
    styleElement.setAttribute("nonce", nonce);
  }
}
module.exports = setAttributesWithoutAttributes;

/***/ }),

/***/ 456:
/***/ ((module) => {



/* istanbul ignore next  */
function apply(styleElement, options, obj) {
  var css = "";
  if (obj.supports) {
    css += "@supports (".concat(obj.supports, ") {");
  }
  if (obj.media) {
    css += "@media ".concat(obj.media, " {");
  }
  var needLayer = typeof obj.layer !== "undefined";
  if (needLayer) {
    css += "@layer".concat(obj.layer.length > 0 ? " ".concat(obj.layer) : "", " {");
  }
  css += obj.css;
  if (needLayer) {
    css += "}";
  }
  if (obj.media) {
    css += "}";
  }
  if (obj.supports) {
    css += "}";
  }
  var sourceMap = obj.sourceMap;
  if (sourceMap && typeof btoa !== "undefined") {
    css += "\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))), " */");
  }

  // For old IE
  /* istanbul ignore if  */
  options.styleTagTransform(css, styleElement, options.options);
}
function removeStyleElement(styleElement) {
  // istanbul ignore if
  if (styleElement.parentNode === null) {
    return false;
  }
  styleElement.parentNode.removeChild(styleElement);
}

/* istanbul ignore next  */
function domAPI(options) {
  if (typeof document === "undefined") {
    return {
      update: function update() {},
      remove: function remove() {}
    };
  }
  var styleElement = options.insertStyleElement(options);
  return {
    update: function update(obj) {
      apply(styleElement, options, obj);
    },
    remove: function remove() {
      removeStyleElement(styleElement);
    }
  };
}
module.exports = domAPI;

/***/ }),

/***/ 58:
/***/ ((module) => {



/* istanbul ignore next  */
function styleTagTransform(css, styleElement) {
  if (styleElement.styleSheet) {
    styleElement.styleSheet.cssText = css;
  } else {
    while (styleElement.firstChild) {
      styleElement.removeChild(styleElement.firstChild);
    }
    styleElement.appendChild(document.createTextNode(css));
  }
}
module.exports = styleTagTransform;

/***/ }),

/***/ 363:
/***/ ((module) => {

module.exports = React;

/***/ }),

/***/ 533:
/***/ ((module) => {

module.exports = ReactDOM;

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			id: moduleId,
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/nonce */
/******/ 	(() => {
/******/ 		__webpack_require__.nc = undefined;
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be isolated against other modules in the chunk.
(() => {

// EXTERNAL MODULE: ../../../../../../Users/benoitrognier/Projects/completium/testproject/node_modules/react/jsx-runtime.js
var jsx_runtime = __webpack_require__(523);
;// CONCATENATED MODULE: ../../../../../../private/var/folders/gy/lhvhryy16bx45x0ttqc536dw0000gn/T/Hello/content.md
/*@jsxRuntime automatic @jsxImportSource react*/

function _createMdxContent(props) {
  const _components = Object.assign({
    h1: "h1",
    p: "p",
    code: "code",
    em: "em",
    span: "span",
    math: "math",
    semantics: "semantics",
    mrow: "mrow",
    mi: "mi",
    mo: "mo",
    msup: "msup",
    mn: "mn",
    annotation: "annotation",
    ul: "ul",
    li: "li",
    strong: "strong",
    del: "del",
    a: "a",
    codeframe: "codeframe",
    pre: "pre",
    table: "table",
    thead: "thead",
    tr: "tr",
    th: "th",
    tbody: "tbody",
    td: "td"
  }, props.components);
  return (0,jsx_runtime.jsxs)("div", {
    style: {
      marginLeft: '20px'
    },
    class: "col-6",
    children: [(0,jsx_runtime.jsx)(_components.h1, {
      id: "hello-dialectik-world",
      children: "Hello Dialectik world!"
    }), (0,jsx_runtime.jsxs)(_components.p, {
      children: ["By default, every markdown file (", (0,jsx_runtime.jsx)(_components.code, {
        children: ".md"
      }), " extension) in ", (0,jsx_runtime.jsx)(_components.code, {
        children: "src/md"
      }), " is compiled as a ", (0,jsx_runtime.jsx)(_components.em, {
        children: "standalone"
      }), " resource."]
    }), (0,jsx_runtime.jsx)(_components.p, {
      children: "An example of Katex equation:"
    }), (0,jsx_runtime.jsx)(_components.p, {
      children: (0,jsx_runtime.jsx)(_components.span, {
        className: "math math-inline",
        children: (0,jsx_runtime.jsxs)(_components.span, {
          className: "katex",
          children: [(0,jsx_runtime.jsx)(_components.span, {
            className: "katex-mathml",
            children: (0,jsx_runtime.jsx)(_components.math, {
              xmlns: "http://www.w3.org/1998/Math/MathML",
              children: (0,jsx_runtime.jsxs)(_components.semantics, {
                children: [(0,jsx_runtime.jsxs)(_components.mrow, {
                  children: [(0,jsx_runtime.jsx)(_components.mi, {
                    children: "f"
                  }), (0,jsx_runtime.jsx)(_components.mo, {
                    stretchy: "false",
                    children: "("
                  }), (0,jsx_runtime.jsx)(_components.mi, {
                    children: "a"
                  }), (0,jsx_runtime.jsx)(_components.mo, {
                    separator: "true",
                    children: ","
                  }), (0,jsx_runtime.jsx)(_components.mi, {
                    children: "b"
                  }), (0,jsx_runtime.jsx)(_components.mo, {
                    separator: "true",
                    children: ","
                  }), (0,jsx_runtime.jsx)(_components.mi, {
                    children: "c"
                  }), (0,jsx_runtime.jsx)(_components.mo, {
                    stretchy: "false",
                    children: ")"
                  }), (0,jsx_runtime.jsx)(_components.mo, {
                    children: "="
                  }), (0,jsx_runtime.jsx)(_components.mo, {
                    stretchy: "false",
                    children: "("
                  }), (0,jsx_runtime.jsxs)(_components.msup, {
                    children: [(0,jsx_runtime.jsx)(_components.mi, {
                      children: "a"
                    }), (0,jsx_runtime.jsx)(_components.mn, {
                      children: "2"
                    })]
                  }), (0,jsx_runtime.jsx)(_components.mo, {
                    children: "+"
                  }), (0,jsx_runtime.jsxs)(_components.msup, {
                    children: [(0,jsx_runtime.jsx)(_components.mi, {
                      children: "b"
                    }), (0,jsx_runtime.jsx)(_components.mn, {
                      children: "2"
                    })]
                  }), (0,jsx_runtime.jsx)(_components.mo, {
                    children: "+"
                  }), (0,jsx_runtime.jsxs)(_components.msup, {
                    children: [(0,jsx_runtime.jsx)(_components.mi, {
                      children: "c"
                    }), (0,jsx_runtime.jsx)(_components.mn, {
                      children: "2"
                    })]
                  }), (0,jsx_runtime.jsxs)(_components.msup, {
                    children: [(0,jsx_runtime.jsx)(_components.mo, {
                      stretchy: "false",
                      children: ")"
                    }), (0,jsx_runtime.jsx)(_components.mn, {
                      children: "3"
                    })]
                  })]
                }), (0,jsx_runtime.jsx)(_components.annotation, {
                  encoding: "application/x-tex",
                  children: "f(a,b,c) = (a^2+b^2+c^2)^3"
                })]
              })
            })
          }), (0,jsx_runtime.jsxs)(_components.span, {
            className: "katex-html",
            "aria-hidden": "true",
            children: [(0,jsx_runtime.jsxs)(_components.span, {
              className: "base",
              children: [(0,jsx_runtime.jsx)(_components.span, {
                className: "strut",
                style: {
                  height: "1em",
                  verticalAlign: "-0.25em"
                }
              }), (0,jsx_runtime.jsx)(_components.span, {
                className: "mord mathnormal",
                style: {
                  marginRight: "0.10764em"
                },
                children: "f"
              }), (0,jsx_runtime.jsx)(_components.span, {
                className: "mopen",
                children: "("
              }), (0,jsx_runtime.jsx)(_components.span, {
                className: "mord mathnormal",
                children: "a"
              }), (0,jsx_runtime.jsx)(_components.span, {
                className: "mpunct",
                children: ","
              }), (0,jsx_runtime.jsx)(_components.span, {
                className: "mspace",
                style: {
                  marginRight: "0.1667em"
                }
              }), (0,jsx_runtime.jsx)(_components.span, {
                className: "mord mathnormal",
                children: "b"
              }), (0,jsx_runtime.jsx)(_components.span, {
                className: "mpunct",
                children: ","
              }), (0,jsx_runtime.jsx)(_components.span, {
                className: "mspace",
                style: {
                  marginRight: "0.1667em"
                }
              }), (0,jsx_runtime.jsx)(_components.span, {
                className: "mord mathnormal",
                children: "c"
              }), (0,jsx_runtime.jsx)(_components.span, {
                className: "mclose",
                children: ")"
              }), (0,jsx_runtime.jsx)(_components.span, {
                className: "mspace",
                style: {
                  marginRight: "0.2778em"
                }
              }), (0,jsx_runtime.jsx)(_components.span, {
                className: "mrel",
                children: "="
              }), (0,jsx_runtime.jsx)(_components.span, {
                className: "mspace",
                style: {
                  marginRight: "0.2778em"
                }
              })]
            }), (0,jsx_runtime.jsxs)(_components.span, {
              className: "base",
              children: [(0,jsx_runtime.jsx)(_components.span, {
                className: "strut",
                style: {
                  height: "1.0641em",
                  verticalAlign: "-0.25em"
                }
              }), (0,jsx_runtime.jsx)(_components.span, {
                className: "mopen",
                children: "("
              }), (0,jsx_runtime.jsxs)(_components.span, {
                className: "mord",
                children: [(0,jsx_runtime.jsx)(_components.span, {
                  className: "mord mathnormal",
                  children: "a"
                }), (0,jsx_runtime.jsx)(_components.span, {
                  className: "msupsub",
                  children: (0,jsx_runtime.jsx)(_components.span, {
                    className: "vlist-t",
                    children: (0,jsx_runtime.jsx)(_components.span, {
                      className: "vlist-r",
                      children: (0,jsx_runtime.jsx)(_components.span, {
                        className: "vlist",
                        style: {
                          height: "0.8141em"
                        },
                        children: (0,jsx_runtime.jsxs)(_components.span, {
                          style: {
                            top: "-3.063em",
                            marginRight: "0.05em"
                          },
                          children: [(0,jsx_runtime.jsx)(_components.span, {
                            className: "pstrut",
                            style: {
                              height: "2.7em"
                            }
                          }), (0,jsx_runtime.jsx)(_components.span, {
                            className: "sizing reset-size6 size3 mtight",
                            children: (0,jsx_runtime.jsx)(_components.span, {
                              className: "mord mtight",
                              children: "2"
                            })
                          })]
                        })
                      })
                    })
                  })
                })]
              }), (0,jsx_runtime.jsx)(_components.span, {
                className: "mspace",
                style: {
                  marginRight: "0.2222em"
                }
              }), (0,jsx_runtime.jsx)(_components.span, {
                className: "mbin",
                children: "+"
              }), (0,jsx_runtime.jsx)(_components.span, {
                className: "mspace",
                style: {
                  marginRight: "0.2222em"
                }
              })]
            }), (0,jsx_runtime.jsxs)(_components.span, {
              className: "base",
              children: [(0,jsx_runtime.jsx)(_components.span, {
                className: "strut",
                style: {
                  height: "0.8974em",
                  verticalAlign: "-0.0833em"
                }
              }), (0,jsx_runtime.jsxs)(_components.span, {
                className: "mord",
                children: [(0,jsx_runtime.jsx)(_components.span, {
                  className: "mord mathnormal",
                  children: "b"
                }), (0,jsx_runtime.jsx)(_components.span, {
                  className: "msupsub",
                  children: (0,jsx_runtime.jsx)(_components.span, {
                    className: "vlist-t",
                    children: (0,jsx_runtime.jsx)(_components.span, {
                      className: "vlist-r",
                      children: (0,jsx_runtime.jsx)(_components.span, {
                        className: "vlist",
                        style: {
                          height: "0.8141em"
                        },
                        children: (0,jsx_runtime.jsxs)(_components.span, {
                          style: {
                            top: "-3.063em",
                            marginRight: "0.05em"
                          },
                          children: [(0,jsx_runtime.jsx)(_components.span, {
                            className: "pstrut",
                            style: {
                              height: "2.7em"
                            }
                          }), (0,jsx_runtime.jsx)(_components.span, {
                            className: "sizing reset-size6 size3 mtight",
                            children: (0,jsx_runtime.jsx)(_components.span, {
                              className: "mord mtight",
                              children: "2"
                            })
                          })]
                        })
                      })
                    })
                  })
                })]
              }), (0,jsx_runtime.jsx)(_components.span, {
                className: "mspace",
                style: {
                  marginRight: "0.2222em"
                }
              }), (0,jsx_runtime.jsx)(_components.span, {
                className: "mbin",
                children: "+"
              }), (0,jsx_runtime.jsx)(_components.span, {
                className: "mspace",
                style: {
                  marginRight: "0.2222em"
                }
              })]
            }), (0,jsx_runtime.jsxs)(_components.span, {
              className: "base",
              children: [(0,jsx_runtime.jsx)(_components.span, {
                className: "strut",
                style: {
                  height: "1.0641em",
                  verticalAlign: "-0.25em"
                }
              }), (0,jsx_runtime.jsxs)(_components.span, {
                className: "mord",
                children: [(0,jsx_runtime.jsx)(_components.span, {
                  className: "mord mathnormal",
                  children: "c"
                }), (0,jsx_runtime.jsx)(_components.span, {
                  className: "msupsub",
                  children: (0,jsx_runtime.jsx)(_components.span, {
                    className: "vlist-t",
                    children: (0,jsx_runtime.jsx)(_components.span, {
                      className: "vlist-r",
                      children: (0,jsx_runtime.jsx)(_components.span, {
                        className: "vlist",
                        style: {
                          height: "0.8141em"
                        },
                        children: (0,jsx_runtime.jsxs)(_components.span, {
                          style: {
                            top: "-3.063em",
                            marginRight: "0.05em"
                          },
                          children: [(0,jsx_runtime.jsx)(_components.span, {
                            className: "pstrut",
                            style: {
                              height: "2.7em"
                            }
                          }), (0,jsx_runtime.jsx)(_components.span, {
                            className: "sizing reset-size6 size3 mtight",
                            children: (0,jsx_runtime.jsx)(_components.span, {
                              className: "mord mtight",
                              children: "2"
                            })
                          })]
                        })
                      })
                    })
                  })
                })]
              }), (0,jsx_runtime.jsxs)(_components.span, {
                className: "mclose",
                children: [(0,jsx_runtime.jsx)(_components.span, {
                  className: "mclose",
                  children: ")"
                }), (0,jsx_runtime.jsx)(_components.span, {
                  className: "msupsub",
                  children: (0,jsx_runtime.jsx)(_components.span, {
                    className: "vlist-t",
                    children: (0,jsx_runtime.jsx)(_components.span, {
                      className: "vlist-r",
                      children: (0,jsx_runtime.jsx)(_components.span, {
                        className: "vlist",
                        style: {
                          height: "0.8141em"
                        },
                        children: (0,jsx_runtime.jsxs)(_components.span, {
                          style: {
                            top: "-3.063em",
                            marginRight: "0.05em"
                          },
                          children: [(0,jsx_runtime.jsx)(_components.span, {
                            className: "pstrut",
                            style: {
                              height: "2.7em"
                            }
                          }), (0,jsx_runtime.jsx)(_components.span, {
                            className: "sizing reset-size6 size3 mtight",
                            children: (0,jsx_runtime.jsx)(_components.span, {
                              className: "mord mtight",
                              children: "3"
                            })
                          })]
                        })
                      })
                    })
                  })
                })]
              })]
            })]
          })]
        })
      })
    }), (0,jsx_runtime.jsx)(_components.p, {
      children: "This is a test:"
    }), (0,jsx_runtime.jsxs)(_components.ul, {
      children: ["\n", (0,jsx_runtime.jsxs)(_components.li, {
        children: [(0,jsx_runtime.jsx)(_components.strong, {
          children: "first"
        }), " bold option"]
      }), "\n", (0,jsx_runtime.jsx)(_components.li, {
        children: "second option"
      }), "\n"]
    }), (0,jsx_runtime.jsxs)(_components.p, {
      children: ["This is an ", (0,jsx_runtime.jsx)(_components.del, {
        children: "external"
      }), " ", (0,jsx_runtime.jsx)(_components.a, {
        href: "https://archetype-lang.org",
        children: "link"
      })]
    }), (0,jsx_runtime.jsx)(_components.p, {
      children: "This is code:"
    }), (0,jsx_runtime.jsx)(_components.codeframe, {
      code: "const MyApp = ''\n\ntype toto = {\n  age : number,\n  name : string\n}\n\nexport function toto() : string {\n  return \"toto\"\n}\nlet x : number = 3\nconst y : number = 3+x\nif (x > y) {\n  console.log(y)\n}",
      children: (0,jsx_runtime.jsx)(_components.pre, {
        className: "language-ts",
        children: (0,jsx_runtime.jsxs)(_components.code, {
          className: "language-ts code-highlight",
          children: [(0,jsx_runtime.jsxs)(_components.span, {
            className: "code-line line-number",
            line: "1",
            children: [(0,jsx_runtime.jsx)(_components.span, {
              className: "token keyword",
              children: "const"
            }), " MyApp ", (0,jsx_runtime.jsx)(_components.span, {
              className: "token operator",
              children: "="
            }), " ", (0,jsx_runtime.jsx)(_components.span, {
              className: "token string",
              children: "''"
            }), "\n"]
          }), (0,jsx_runtime.jsx)(_components.span, {
            className: "code-line line-number",
            line: "2",
            children: "\n"
          }), (0,jsx_runtime.jsxs)(_components.span, {
            className: "code-line line-number",
            line: "3",
            children: [(0,jsx_runtime.jsx)(_components.span, {
              className: "token keyword",
              children: "type"
            }), " ", (0,jsx_runtime.jsx)(_components.span, {
              className: "token class-name",
              children: "toto"
            }), " ", (0,jsx_runtime.jsx)(_components.span, {
              className: "token operator",
              children: "="
            }), " ", (0,jsx_runtime.jsx)(_components.span, {
              className: "token punctuation",
              children: "{"
            }), "\n"]
          }), (0,jsx_runtime.jsxs)(_components.span, {
            className: "code-line line-number highlight-line",
            line: "4",
            children: ["  age ", (0,jsx_runtime.jsx)(_components.span, {
              className: "token operator",
              children: ":"
            }), " ", (0,jsx_runtime.jsx)(_components.span, {
              className: "token builtin",
              children: "number"
            }), (0,jsx_runtime.jsx)(_components.span, {
              className: "token punctuation",
              children: ","
            }), "\n"]
          }), (0,jsx_runtime.jsxs)(_components.span, {
            className: "code-line line-number highlight-line",
            line: "5",
            children: ["  name ", (0,jsx_runtime.jsx)(_components.span, {
              className: "token operator",
              children: ":"
            }), " ", (0,jsx_runtime.jsx)(_components.span, {
              className: "token builtin",
              children: "string"
            }), "\n"]
          }), (0,jsx_runtime.jsxs)(_components.span, {
            className: "code-line line-number",
            line: "6",
            children: [(0,jsx_runtime.jsx)(_components.span, {
              className: "token punctuation",
              children: "}"
            }), "\n"]
          }), (0,jsx_runtime.jsx)(_components.span, {
            className: "code-line line-number",
            line: "7",
            children: "\n"
          }), (0,jsx_runtime.jsxs)(_components.span, {
            className: "code-line line-number",
            line: "8",
            children: [(0,jsx_runtime.jsx)(_components.span, {
              className: "token keyword",
              children: "export"
            }), " ", (0,jsx_runtime.jsx)(_components.span, {
              className: "token keyword",
              children: "function"
            }), " ", (0,jsx_runtime.jsx)(_components.span, {
              className: "token function",
              children: "toto"
            }), (0,jsx_runtime.jsx)(_components.span, {
              className: "token punctuation",
              children: "("
            }), (0,jsx_runtime.jsx)(_components.span, {
              className: "token punctuation",
              children: ")"
            }), " ", (0,jsx_runtime.jsx)(_components.span, {
              className: "token operator",
              children: ":"
            }), " ", (0,jsx_runtime.jsx)(_components.span, {
              className: "token builtin",
              children: "string"
            }), " ", (0,jsx_runtime.jsx)(_components.span, {
              className: "token punctuation",
              children: "{"
            }), "\n"]
          }), (0,jsx_runtime.jsxs)(_components.span, {
            className: "code-line line-number",
            line: "9",
            children: ["  ", (0,jsx_runtime.jsx)(_components.span, {
              className: "token keyword",
              children: "return"
            }), " ", (0,jsx_runtime.jsx)(_components.span, {
              className: "token string",
              children: "\"toto\""
            }), "\n"]
          }), (0,jsx_runtime.jsxs)(_components.span, {
            className: "code-line line-number",
            line: "10",
            children: [(0,jsx_runtime.jsx)(_components.span, {
              className: "token punctuation",
              children: "}"
            }), "\n"]
          }), (0,jsx_runtime.jsxs)(_components.span, {
            className: "code-line line-number",
            line: "11",
            children: [(0,jsx_runtime.jsx)(_components.span, {
              className: "token keyword",
              children: "let"
            }), " x ", (0,jsx_runtime.jsx)(_components.span, {
              className: "token operator",
              children: ":"
            }), " ", (0,jsx_runtime.jsx)(_components.span, {
              className: "token builtin",
              children: "number"
            }), " ", (0,jsx_runtime.jsx)(_components.span, {
              className: "token operator",
              children: "="
            }), " ", (0,jsx_runtime.jsx)(_components.span, {
              className: "token number",
              children: "3"
            }), "\n"]
          }), (0,jsx_runtime.jsxs)(_components.span, {
            className: "code-line line-number",
            line: "12",
            children: [(0,jsx_runtime.jsx)(_components.span, {
              className: "token keyword",
              children: "const"
            }), " y ", (0,jsx_runtime.jsx)(_components.span, {
              className: "token operator",
              children: ":"
            }), " ", (0,jsx_runtime.jsx)(_components.span, {
              className: "token builtin",
              children: "number"
            }), " ", (0,jsx_runtime.jsx)(_components.span, {
              className: "token operator",
              children: "="
            }), " ", (0,jsx_runtime.jsx)(_components.span, {
              className: "token number",
              children: "3"
            }), (0,jsx_runtime.jsx)(_components.span, {
              className: "token operator",
              children: "+"
            }), "x\n"]
          }), (0,jsx_runtime.jsxs)(_components.span, {
            className: "code-line line-number",
            line: "13",
            children: [(0,jsx_runtime.jsx)(_components.span, {
              className: "token keyword",
              children: "if"
            }), " ", (0,jsx_runtime.jsx)(_components.span, {
              className: "token punctuation",
              children: "("
            }), "x ", (0,jsx_runtime.jsx)(_components.span, {
              className: "token operator",
              children: ">"
            }), " y", (0,jsx_runtime.jsx)(_components.span, {
              className: "token punctuation",
              children: ")"
            }), " ", (0,jsx_runtime.jsx)(_components.span, {
              className: "token punctuation",
              children: "{"
            }), "\n"]
          }), (0,jsx_runtime.jsxs)(_components.span, {
            className: "code-line line-number",
            line: "14",
            children: ["  ", (0,jsx_runtime.jsx)(_components.span, {
              className: "token builtin",
              children: "console"
            }), (0,jsx_runtime.jsx)(_components.span, {
              className: "token punctuation",
              children: "."
            }), (0,jsx_runtime.jsx)(_components.span, {
              className: "token function",
              children: "log"
            }), (0,jsx_runtime.jsx)(_components.span, {
              className: "token punctuation",
              children: "("
            }), "y", (0,jsx_runtime.jsx)(_components.span, {
              className: "token punctuation",
              children: ")"
            }), "\n"]
          }), (0,jsx_runtime.jsxs)(_components.span, {
            className: "code-line line-number",
            line: "15",
            children: [(0,jsx_runtime.jsx)(_components.span, {
              className: "token punctuation",
              children: "}"
            }), "\n"]
          })]
        })
      })
    }), (0,jsx_runtime.jsx)(_components.p, {
      children: "This is some archetype code:"
    }), (0,jsx_runtime.jsx)(_components.codeframe, {
      code: "archetype exec_cond_demo(admin : address, value : nat)\n\nentry set_value (v : nat) {\n  called by admin\n  require {\n    r1: transferred > value otherwise \"INSUFFICIENT_TRANSFERRED_AMOUNT\";\n    r2: now < 2023-01-01    otherwise \"TOO_LATE\";\n  }\n  effect { value := v; }\n}",
      children: (0,jsx_runtime.jsx)(_components.pre, {
        className: "language-archetype",
        children: (0,jsx_runtime.jsxs)(_components.code, {
          className: "language-archetype code-highlight",
          children: [(0,jsx_runtime.jsxs)(_components.span, {
            className: "code-line line-number",
            line: "1",
            children: [(0,jsx_runtime.jsx)(_components.span, {
              className: "token archetype keyword",
              children: "archetype"
            }), " exec_cond_demo", (0,jsx_runtime.jsx)(_components.span, {
              className: "token punctuation",
              children: "("
            }), "admin ", (0,jsx_runtime.jsx)(_components.span, {
              className: "token punctuation",
              children: ":"
            }), " ", (0,jsx_runtime.jsx)(_components.span, {
              className: "token builtin",
              children: "address"
            }), (0,jsx_runtime.jsx)(_components.span, {
              className: "token punctuation",
              children: ","
            }), " value ", (0,jsx_runtime.jsx)(_components.span, {
              className: "token punctuation",
              children: ":"
            }), " ", (0,jsx_runtime.jsx)(_components.span, {
              className: "token builtin",
              children: "nat"
            }), (0,jsx_runtime.jsx)(_components.span, {
              className: "token punctuation",
              children: ")"
            }), "\n"]
          }), (0,jsx_runtime.jsx)(_components.span, {
            className: "code-line line-number",
            line: "2",
            children: "\n"
          }), (0,jsx_runtime.jsxs)(_components.span, {
            className: "code-line line-number",
            line: "3",
            children: [(0,jsx_runtime.jsxs)(_components.span, {
              className: "token entry",
              children: [(0,jsx_runtime.jsx)(_components.span, {
                className: "token keyword",
                children: "entry"
              }), " ", (0,jsx_runtime.jsx)(_components.span, {
                className: "token function-name function",
                children: "set_value"
              })]
            }), " ", (0,jsx_runtime.jsx)(_components.span, {
              className: "token punctuation",
              children: "("
            }), "v ", (0,jsx_runtime.jsx)(_components.span, {
              className: "token punctuation",
              children: ":"
            }), " ", (0,jsx_runtime.jsx)(_components.span, {
              className: "token builtin",
              children: "nat"
            }), (0,jsx_runtime.jsx)(_components.span, {
              className: "token punctuation",
              children: ")"
            }), " ", (0,jsx_runtime.jsx)(_components.span, {
              className: "token punctuation",
              children: "{"
            }), "\n"]
          }), (0,jsx_runtime.jsxs)(_components.span, {
            className: "code-line line-number",
            line: "4",
            children: ["  ", (0,jsx_runtime.jsx)(_components.span, {
              className: "token section keyword",
              children: "called by"
            }), " admin\n"]
          }), (0,jsx_runtime.jsxs)(_components.span, {
            className: "code-line line-number",
            line: "5",
            children: ["  ", (0,jsx_runtime.jsx)(_components.span, {
              className: "token section keyword",
              children: "require"
            }), " ", (0,jsx_runtime.jsx)(_components.span, {
              className: "token punctuation",
              children: "{"
            }), "\n"]
          }), (0,jsx_runtime.jsxs)(_components.span, {
            className: "code-line line-number",
            line: "6",
            children: ["    r1", (0,jsx_runtime.jsx)(_components.span, {
              className: "token punctuation",
              children: ":"
            }), " ", (0,jsx_runtime.jsx)(_components.span, {
              className: "token constant",
              children: "transferred"
            }), " > value ", (0,jsx_runtime.jsx)(_components.span, {
              className: "token section keyword",
              children: "otherwise"
            }), " ", (0,jsx_runtime.jsx)(_components.span, {
              className: "token string",
              children: "\"INSUFFICIENT_TRANSFERRED_AMOUNT\""
            }), (0,jsx_runtime.jsx)(_components.span, {
              className: "token punctuation",
              children: ";"
            }), "\n"]
          }), (0,jsx_runtime.jsxs)(_components.span, {
            className: "code-line line-number",
            line: "7",
            children: ["    r2", (0,jsx_runtime.jsx)(_components.span, {
              className: "token punctuation",
              children: ":"
            }), " ", (0,jsx_runtime.jsx)(_components.span, {
              className: "token constant",
              children: "now"
            }), " < ", (0,jsx_runtime.jsx)(_components.span, {
              className: "token error",
              children: "2023"
            }), "-", (0,jsx_runtime.jsx)(_components.span, {
              className: "token error",
              children: "01"
            }), "-", (0,jsx_runtime.jsx)(_components.span, {
              className: "token error",
              children: "01"
            }), "    ", (0,jsx_runtime.jsx)(_components.span, {
              className: "token section keyword",
              children: "otherwise"
            }), " ", (0,jsx_runtime.jsx)(_components.span, {
              className: "token string",
              children: "\"TOO_LATE\""
            }), (0,jsx_runtime.jsx)(_components.span, {
              className: "token punctuation",
              children: ";"
            }), "\n"]
          }), (0,jsx_runtime.jsxs)(_components.span, {
            className: "code-line line-number",
            line: "8",
            children: ["  ", (0,jsx_runtime.jsx)(_components.span, {
              className: "token punctuation",
              children: "}"
            }), "\n"]
          }), (0,jsx_runtime.jsxs)(_components.span, {
            className: "code-line line-number",
            line: "9",
            children: ["  ", (0,jsx_runtime.jsx)(_components.span, {
              className: "token section keyword",
              children: "effect"
            }), " ", (0,jsx_runtime.jsx)(_components.span, {
              className: "token punctuation",
              children: "{"
            }), " value ", (0,jsx_runtime.jsx)(_components.span, {
              className: "token function",
              children: ":="
            }), " v", (0,jsx_runtime.jsx)(_components.span, {
              className: "token punctuation",
              children: ";"
            }), " ", (0,jsx_runtime.jsx)(_components.span, {
              className: "token punctuation",
              children: "}"
            }), "\n"]
          }), (0,jsx_runtime.jsxs)(_components.span, {
            className: "code-line line-number",
            line: "10",
            children: [(0,jsx_runtime.jsx)(_components.span, {
              className: "token punctuation",
              children: "}"
            }), "\n"]
          })]
        })
      })
    }), (0,jsx_runtime.jsx)(_components.h1, {
      id: "this-is-another-title",
      children: "This is another title"
    }), (0,jsx_runtime.jsxs)(_components.p, {
      children: ["And a ", (0,jsx_runtime.jsx)(_components.a, {
        href: "#hello-dialectik-world",
        children: "link"
      }), " to top."]
    }), (0,jsx_runtime.jsx)(_components.p, {
      children: "Let's try a table:"
    }), (0,jsx_runtime.jsxs)(_components.table, {
      children: [(0,jsx_runtime.jsx)(_components.thead, {
        children: (0,jsx_runtime.jsxs)(_components.tr, {
          children: [(0,jsx_runtime.jsx)(_components.th, {
            children: "Tables"
          }), (0,jsx_runtime.jsx)(_components.th, {
            align: "center",
            children: "Are"
          }), (0,jsx_runtime.jsx)(_components.th, {
            align: "right",
            children: "Cool"
          })]
        })
      }), (0,jsx_runtime.jsxs)(_components.tbody, {
        children: [(0,jsx_runtime.jsxs)(_components.tr, {
          children: [(0,jsx_runtime.jsx)(_components.td, {
            children: "col 1 is"
          }), (0,jsx_runtime.jsx)(_components.td, {
            align: "center",
            children: "left-aligned"
          }), (0,jsx_runtime.jsx)(_components.td, {
            align: "right",
            children: "$1600"
          })]
        }), (0,jsx_runtime.jsxs)(_components.tr, {
          children: [(0,jsx_runtime.jsx)(_components.td, {
            children: "col 2 is"
          }), (0,jsx_runtime.jsx)(_components.td, {
            align: "center",
            children: "centered"
          }), (0,jsx_runtime.jsx)(_components.td, {
            align: "right",
            children: "$12"
          })]
        }), (0,jsx_runtime.jsxs)(_components.tr, {
          children: [(0,jsx_runtime.jsx)(_components.td, {
            children: "col 3 is"
          }), (0,jsx_runtime.jsx)(_components.td, {
            align: "center",
            children: "right-aligned"
          }), (0,jsx_runtime.jsx)(_components.td, {
            align: "right",
            children: "$1"
          })]
        })]
      })]
    }), (0,jsx_runtime.jsx)("h1", {
      children: "this is an html tag"
    }), (0,jsx_runtime.jsx)(_components.p, {
      children: "And some text."
    })]
  });
}
function MDXContent(props = {}) {
  const {
    wrapper: MDXLayout
  } = props.components || {};
  return MDXLayout ? (0,jsx_runtime.jsx)(MDXLayout, Object.assign({}, props, {
    children: (0,jsx_runtime.jsx)(_createMdxContent, props)
  })) : _createMdxContent(props);
}
/* harmony default export */ const content = (MDXContent);
// EXTERNAL MODULE: external "React"
var external_React_ = __webpack_require__(363);
var external_React_default = /*#__PURE__*/__webpack_require__.n(external_React_);
// EXTERNAL MODULE: ../../../../../../Users/benoitrognier/Projects/completium/testproject/node_modules/react-dom/client.js
var client = __webpack_require__(420);
;// CONCATENATED MODULE: ../../../../../../Users/benoitrognier/Projects/completium/testproject/node_modules/clsx/dist/clsx.m.js
function r(e){var t,f,n="";if("string"==typeof e||"number"==typeof e)n+=e;else if("object"==typeof e)if(Array.isArray(e))for(t=0;t<e.length;t++)e[t]&&(f=r(e[t]))&&(n&&(n+=" "),n+=f);else for(t in e)e[t]&&(n&&(n+=" "),n+=t);return n}function clsx(){for(var e,t,f=0,n="";f<arguments.length;)(e=arguments[f++])&&(t=r(e))&&(n&&(n+=" "),n+=t);return n}/* harmony default export */ const clsx_m = (clsx);
;// CONCATENATED MODULE: ../../../../../../Users/benoitrognier/Projects/completium/testproject/node_modules/copy-text-to-clipboard/index.js
function copyTextToClipboard(text, {target = document.body} = {}) {
	if (typeof text !== 'string') {
		throw new TypeError(`Expected parameter \`text\` to be a \`string\`, got \`${typeof text}\`.`);
	}

	const element = document.createElement('textarea');
	const previouslyFocusedElement = document.activeElement;

	element.value = text;

	// Prevent keyboard from showing on mobile
	element.setAttribute('readonly', '');

	element.style.contain = 'strict';
	element.style.position = 'absolute';
	element.style.left = '-9999px';
	element.style.fontSize = '12pt'; // Prevent zooming on iOS

	const selection = document.getSelection();
	const originalRange = selection.rangeCount > 0 && selection.getRangeAt(0);

	target.append(element);
	element.select();

	// Explicit selection workaround for iOS
	element.selectionStart = 0;
	element.selectionEnd = text.length;

	let isSuccess = false;
	try {
		isSuccess = document.execCommand('copy');
	} catch {}

	element.remove();

	if (originalRange) {
		selection.removeAllRanges();
		selection.addRange(originalRange);
	}

	// Get the focus back on the previously focused element, if any
	if (previouslyFocusedElement) {
		previouslyFocusedElement.focus();
	}

	return isSuccess;
}

// EXTERNAL MODULE: ../../../../../../Users/benoitrognier/Projects/completium/testproject/node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js
var injectStylesIntoStyleTag = __webpack_require__(972);
var injectStylesIntoStyleTag_default = /*#__PURE__*/__webpack_require__.n(injectStylesIntoStyleTag);
// EXTERNAL MODULE: ../../../../../../Users/benoitrognier/Projects/completium/testproject/node_modules/style-loader/dist/runtime/styleDomAPI.js
var styleDomAPI = __webpack_require__(456);
var styleDomAPI_default = /*#__PURE__*/__webpack_require__.n(styleDomAPI);
// EXTERNAL MODULE: ../../../../../../Users/benoitrognier/Projects/completium/testproject/node_modules/style-loader/dist/runtime/insertBySelector.js
var insertBySelector = __webpack_require__(42);
var insertBySelector_default = /*#__PURE__*/__webpack_require__.n(insertBySelector);
// EXTERNAL MODULE: ../../../../../../Users/benoitrognier/Projects/completium/testproject/node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js
var setAttributesWithoutAttributes = __webpack_require__(14);
var setAttributesWithoutAttributes_default = /*#__PURE__*/__webpack_require__.n(setAttributesWithoutAttributes);
// EXTERNAL MODULE: ../../../../../../Users/benoitrognier/Projects/completium/testproject/node_modules/style-loader/dist/runtime/insertStyleElement.js
var insertStyleElement = __webpack_require__(34);
var insertStyleElement_default = /*#__PURE__*/__webpack_require__.n(insertStyleElement);
// EXTERNAL MODULE: ../../../../../../Users/benoitrognier/Projects/completium/testproject/node_modules/style-loader/dist/runtime/styleTagTransform.js
var styleTagTransform = __webpack_require__(58);
var styleTagTransform_default = /*#__PURE__*/__webpack_require__.n(styleTagTransform);
// EXTERNAL MODULE: ../../../../../../Users/benoitrognier/Projects/completium/testproject/node_modules/css-loader/dist/cjs.js!../../../../../../private/var/folders/gy/lhvhryy16bx45x0ttqc536dw0000gn/T/Hello/css/copy-button.css
var copy_button = __webpack_require__(945);
;// CONCATENATED MODULE: ../../../../../../private/var/folders/gy/lhvhryy16bx45x0ttqc536dw0000gn/T/Hello/css/copy-button.css

      
      
      
      
      
      
      
      
      

var options = {};

options.styleTagTransform = (styleTagTransform_default());
options.setAttributes = (setAttributesWithoutAttributes_default());

      options.insert = insertBySelector_default().bind(null, "head");
    
options.domAPI = (styleDomAPI_default());
options.insertStyleElement = (insertStyleElement_default());

var update = injectStylesIntoStyleTag_default()(copy_button/* default */.Z, options);




       /* harmony default export */ const css_copy_button = (copy_button/* default */.Z && copy_button/* default.locals */.Z.locals ? copy_button/* default.locals */.Z.locals : undefined);

// EXTERNAL MODULE: ../../../../../../Users/benoitrognier/Projects/completium/testproject/node_modules/css-loader/dist/cjs.js!../../../../../../private/var/folders/gy/lhvhryy16bx45x0ttqc536dw0000gn/T/Hello/css/link.css
var css_link = __webpack_require__(941);
;// CONCATENATED MODULE: ../../../../../../private/var/folders/gy/lhvhryy16bx45x0ttqc536dw0000gn/T/Hello/css/link.css

      
      
      
      
      
      
      
      
      

var link_options = {};

link_options.styleTagTransform = (styleTagTransform_default());
link_options.setAttributes = (setAttributesWithoutAttributes_default());

      link_options.insert = insertBySelector_default().bind(null, "head");
    
link_options.domAPI = (styleDomAPI_default());
link_options.insertStyleElement = (insertStyleElement_default());

var link_update = injectStylesIntoStyleTag_default()(css_link/* default */.Z, link_options);




       /* harmony default export */ const Hello_css_link = (css_link/* default */.Z && css_link/* default.locals */.Z.locals ? css_link/* default.locals */.Z.locals : undefined);

// EXTERNAL MODULE: ../../../../../../Users/benoitrognier/Projects/completium/testproject/node_modules/css-loader/dist/cjs.js!../../../../../../private/var/folders/gy/lhvhryy16bx45x0ttqc536dw0000gn/T/Hello/css/prism-plus.css
var prism_plus = __webpack_require__(352);
;// CONCATENATED MODULE: ../../../../../../private/var/folders/gy/lhvhryy16bx45x0ttqc536dw0000gn/T/Hello/css/prism-plus.css

      
      
      
      
      
      
      
      
      

var prism_plus_options = {};

prism_plus_options.styleTagTransform = (styleTagTransform_default());
prism_plus_options.setAttributes = (setAttributesWithoutAttributes_default());

      prism_plus_options.insert = insertBySelector_default().bind(null, "head");
    
prism_plus_options.domAPI = (styleDomAPI_default());
prism_plus_options.insertStyleElement = (insertStyleElement_default());

var prism_plus_update = injectStylesIntoStyleTag_default()(prism_plus/* default */.Z, prism_plus_options);




       /* harmony default export */ const css_prism_plus = (prism_plus/* default */.Z && prism_plus/* default.locals */.Z.locals ? prism_plus/* default.locals */.Z.locals : undefined);

// EXTERNAL MODULE: ../../../../../../Users/benoitrognier/Projects/completium/testproject/node_modules/css-loader/dist/cjs.js!../../../../../../private/var/folders/gy/lhvhryy16bx45x0ttqc536dw0000gn/T/Hello/css/vars.css
var vars = __webpack_require__(886);
;// CONCATENATED MODULE: ../../../../../../private/var/folders/gy/lhvhryy16bx45x0ttqc536dw0000gn/T/Hello/css/vars.css

      
      
      
      
      
      
      
      
      

var vars_options = {};

vars_options.styleTagTransform = (styleTagTransform_default());
vars_options.setAttributes = (setAttributesWithoutAttributes_default());

      vars_options.insert = insertBySelector_default().bind(null, "head");
    
vars_options.domAPI = (styleDomAPI_default());
vars_options.insertStyleElement = (insertStyleElement_default());

var vars_update = injectStylesIntoStyleTag_default()(vars/* default */.Z, vars_options);




       /* harmony default export */ const css_vars = (vars/* default */.Z && vars/* default.locals */.Z.locals ? vars/* default.locals */.Z.locals : undefined);

;// CONCATENATED MODULE: ../../../../../../private/var/folders/gy/lhvhryy16bx45x0ttqc536dw0000gn/T/Hello/components.tsx
var __assign = (undefined && undefined.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};

// @ts-ignore

// @ts-ignore

// @ts-ignore





var CopyButton = function (_a) {
    var code = _a.code, className = _a.className;
    var _b = external_React_default().useState(false), isCopied = _b[0], setIsCopied = _b[1];
    var copyTimeout = external_React_default().useRef(undefined);
    var handleCopyCode = external_React_default().useCallback(function () {
        copyTextToClipboard(code);
        setIsCopied(true);
        copyTimeout.current = window.setTimeout(function () {
            setIsCopied(false);
        }, 1000);
    }, [code]);
    external_React_default().useEffect(function () { return function () { return window.clearTimeout(copyTimeout.current); }; }, []);
    return ((0,jsx_runtime.jsx)("button", __assign({ type: "button", "aria-label": isCopied
            ? 'Copied'
            : 'Copy code to clipboard', title: 'Copy', className: clsx_m('copyButton', isCopied && 'copyButtonCopied'), onClick: handleCopyCode }, { children: (0,jsx_runtime.jsx)("span", __assign({ className: 'copyButtonIcons', "aria-hidden": "true" }, { children: isCopied
                ? (0,jsx_runtime.jsx)("svg", __assign({ className: 'copyButtonSuccessIcon', viewBox: "0 0 24 24" }, { children: (0,jsx_runtime.jsx)("path", { d: "M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z" }) }))
                : (0,jsx_runtime.jsx)("svg", __assign({ className: 'copyButtonIcon', viewBox: "0 0 24 24" }, { children: (0,jsx_runtime.jsx)("path", { d: "M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z" }) })) })) })));
};
var CodeFrame = function (_a) {
    var code = _a.code, children = _a.children;
    return (0,jsx_runtime.jsxs)("div", __assign({ className: 'codeFrame' }, { children: [(0,jsx_runtime.jsx)(CopyButton, { code: code }), children] }));
};
var Link = function (_a) {
    var children = _a.children, href = _a.href;
    // Check if the link is for a section on the page
    // We don't want to add the attributes for the on page links
    var onPage = href.startsWith('#');
    return ((0,jsx_runtime.jsx)("a", __assign({ href: href, 
        // Open the link in a new page
        target: onPage ? undefined : '_blank', 
        // Add noopener and noreferrer for security reasons
        rel: onPage ? undefined : 'noopener noreferrer' }, { children: children })));
};
// Map HTML elements to React components
var getComponents = function () {
    return {
        a: function (props) { return (0,jsx_runtime.jsx)(Link, { children: props.children, href: props.href }); },
        codeframe: function (props) { return (0,jsx_runtime.jsx)(CodeFrame, { code: props.code, children: props.children }); }
    };
};

;// CONCATENATED MODULE: ../../../../../../private/var/folders/gy/lhvhryy16bx45x0ttqc536dw0000gn/T/Hello/single.tsx

// @ts-ignore

// @ts-ignore

// @ts-ignore


var root = client.createRoot(document.getElementById('root'));
root.render((0,jsx_runtime.jsx)((external_React_default()).StrictMode, { children: (0,jsx_runtime.jsx)(content, { components: getComponents() }) }));

})();

/******/ })()
;"}